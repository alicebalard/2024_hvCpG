#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
setwd("~/Documents/GIT/2024_hvCpG/")
setwd("~/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/")
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`)
VanBaakESS_split <- tstrsplit(VanBaakESS, "[:-]", fixed = FALSE)
?tstrsplit
library(dplyr, data.table, readxl, progress, ggplot2, tidyr, scales, viridis,
ggrastr, Cairo,genomation, GenomicRanges, GenomicFeatures)
library(dplyr, data.table, readxl, progress, ggplot2, tidyr, scales, viridis,
ggrastr, Cairo,genomation, GenomicRanges, GenomicFeatures)
packages <- c("dplyr", "data.table", "readxl", "progress", "ggplot2",
"tidyr", "scales", "viridis", "ggrastr", "Cairo",
"genomation", "GenomicRanges", "GenomicFeatures")
lapply(packages, library, character.only = TRUE)
# Download the chain file
chain_url <- "http://hgdownload.cse.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz"
chain_gz <- "hg19ToHg38.over.chain.gz"
chain_file <- "hg19ToHg38.over.chain"
if (!file.exists(chain_file)) {
download.file(chain_url, chain_gz)
R.utils::gunzip(chain_gz, destname = chain_file, remove = FALSE)
}
chain <- import.chain(chain_file)
#############################################
## Needed to perform liftover hg19 to hg38 ##
library(rtracklayer)
library(GenomicRanges)
# Download the chain file
chain_url <- "http://hgdownload.cse.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz"
chain_gz <- "hg19ToHg38.over.chain.gz"
chain_file <- "hg19ToHg38.over.chain"
if (!file.exists(chain_file)) {
download.file(chain_url, chain_gz)
R.utils::gunzip(chain_gz, destname = chain_file, remove = FALSE)
}
chain <- import.chain(chain_file)
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`)
VanBaakESS_split <- tstrsplit(VanBaakESS, "[:-]", fixed = FALSE)
VanBaakESS_GRanges <- GRanges(
seqnames = VanBaakESS_split[[1]],
ranges = IRanges(start = as.integer(VanBaakESS_split[[2]]), end = as.integer(VanBaakESS_split[[3]])),
strand = "*")
VanBaakESS_GRanges_hg38 <- liftOver(VanBaakESS_GRanges, chain)
VanBaakESS_GRanges_hg38 <- unlist(VanBaakESS_GRanges_hg38)
VanBaakESS_GRanges_hg38
VanBaakESS_GRanges
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
VanBaakESS$`ESS hit`
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`[VanBaakESS$`ESS hit`])
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`[VanBaakESS$`ESS hit`])
VanBaakESS
length(VanBaakESS)
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
table(VanBaakESS$`ESS hit`)
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`[VanBaakESS$`ESS hit`])
VanBaakESS_split <- tstrsplit(VanBaakESS, "[:-]", fixed = FALSE)
VanBaakESS_GRanges <- GRanges(
seqnames = VanBaakESS_split[[1]],
ranges = IRanges(start = as.integer(VanBaakESS_split[[2]]), end = as.integer(VanBaakESS_split[[3]])),
strand = "*")
VanBaakESS_GRanges_hg38 <- liftOver(VanBaakESS_GRanges, chain)
VanBaakESS_GRanges_hg38 <- unlist(VanBaakESS_GRanges_hg38)
VanBaakESS_GRanges_hg38
# Find overlaps: which CpGs fall in VanBaakESS regions
hits <- findOverlaps(gr_cpg, VanBaakESS_GRanges_hg38)
#######################################
## Harris2012_1776SIV_10children450k ##
HarrisSIV <- readxl::read_excel("dataPrev/Harris2012_1776SIV_10children450k.xls", sheet = 3)
HarrisSIV <- unique(HarrisSIV$Coordinate)
HarrisSIV <- unique(HarrisSIV$Coordinate) ; length(HarrisSIV)
#######################################
## Harris2012_1776SIV_10children450k ##
HarrisSIV <- readxl::read_excel("dataPrev/Harris2012_1776SIV_10children450k.xls", sheet = 3)
HarrisSIV <- unique(HarrisSIV$Coordinate) ; length(HarrisSIV)
tstrsplit(HarrisSIV, "[:-]", fixed = FALSE)
HarrisSIV
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`[VanBaakESS$`ESS hit`])
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_2210ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`[VanBaakESS$`ESS hit`])
length(VanBaakESS)
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_1580ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`[VanBaakESS$`ESS hit`])
length(VanBaakESS)
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_1580ESS_450k.xlsx", sheet = 2)
head(VanBaakESS)
VanBaakESS[c("UCSC browser coordinates", "CG")]
#######################################
## Harris2012_1776SIV_10children450k ##
HarrisSIV <- readxl::read_excel("dataPrev/Harris2012_1776SIV_10children450k.xls", sheet = 3)
HarrisSIV$Probe
HarrisSIV$CoordinateProbe
HarrisSIV[c("Coordinate", "Probe")]
df1 = HarrisSIV[c("Coordinate", "Probe")]
df2 = VanBaakESS[c("UCSC browser coordinates", "CG")]
names(df1)
names(df2) = names(df1)
merge(df1, df2)
df1 = HarrisSIV[c("Coordinate", "Probe")]
df2 = VanBaakESS[c("UCSC browser coordinates", "CG")]
names(df2)[2] = "Probe"
merge(df1, df2)
#######################################
## Harris2012_1776SIV_10children450k ##
HarrisSIV <- readxl::read_excel("dataPrev/Harris2012_1776SIV_10children450k.xls", sheet = 3)
HarrisSIV <- unique(HarrisSIV$Coordinate) ; length(HarrisSIV)
HarrisSIV_split <- tstrsplit(HarrisSIV, "[:-]", fixed = FALSE)
HarrisSIV_GRanges <- GRanges(
seqnames = HarrisSIV_split[[1]],
ranges = IRanges(start = as.integer(HarrisSIV_split[[2]]),
end = as.integer(HarrisSIV_split[[3]])) + 1,
strand = "*")
HarrisSIV_GRanges_hg38 <- liftOver(HarrisSIV_GRanges, chain)
HarrisSIV_GRanges_hg38 <- unlist(HarrisSIV_GRanges_hg38)
HarrisSIV_GRanges_hg38
#######################################
## Harris2012_1776SIV_10children450k ##
HarrisSIV <- readxl::read_excel("dataPrev/Harris2012_1776SIV_10children450k.xls", sheet = 3)
HarrisSIV <- unique(HarrisSIV$Coordinate) ; length(HarrisSIV)
HarrisSIV_split <- tstrsplit(HarrisSIV, "[:-]", fixed = FALSE)
head(HarrisSIV)
HarrisSIV_GRanges <- GRanges(
seqnames = HarrisSIV_split[[1]],
ranges = IRanges(start = as.integer(HarrisSIV_split[[2]]),
end = as.integer(HarrisSIV_split[[3]])) + 1,
strand = "*")
HarrisSIV_GRanges
HarrisSIV_GRanges_hg38 <- liftOver(HarrisSIV_GRanges, chain)
HarrisSIV_GRanges_hg38 <- unlist(HarrisSIV_GRanges_hg38)
# Find overlaps: which CpGs fall in VanBaakESS regions
hits <- findOverlaps(gr_cpg, VanBaakESS_GRanges_hg38)
HarrisSIV_GRanges_hg38 <- unlist(HarrisSIV_GRanges_hg38)
HarrisSIV <- readxl::read_excel("dataPrev/Harris2012_1776SIV_10children450k.xls", sheet = 3)
HarrisSIV <- unique(HarrisSIV$Coordinate) ; length(HarrisSIV)
HarrisSIV_split <- tstrsplit(HarrisSIV, "[:-]", fixed = FALSE)
HarrisSIV_GRanges <- GRanges(
seqnames = HarrisSIV_split[[1]],
ranges = IRanges(start = as.integer(HarrisSIV_split[[2]]),
end = as.integer(HarrisSIV_split[[3]])) + 1,
strand = "*")
HarrisSIV_GRanges_hg38 <- liftOver(HarrisSIV_GRanges, chain)
HarrisSIV_GRanges_hg38 <- unlist(HarrisSIV_GRanges_hg38)
deparse(substitute(VanBaakESS_GRanges_hg38))
strsplit(deparse(substitute(VanBaakESS_GRanges_hg38)), "_")
strsplit(deparse(substitute(VanBaakESS_GRanges_hg38)), "_")[1]
unlist(strsplit(deparse(substitute(VanBaakESS_GRanges_hg38)), "_"))
unlist(strsplit(deparse(substitute(VanBaakESS_GRanges_hg38)), "_"))[1]
################################
## To get alpha in each group ##
getMEdt <- function(gr_cpg, GRanges_hg38, MEgroup){
MEgroup = unlist(strsplit(deparse(substitute(GRanges_hg38)), "_"))[1]
hits = findOverlaps(gr_cpg, GRanges_hg38)
cpg_in_MEs = gr_cpg[queryHits(hits)]
print(length(cpg_in_MEs))
cpg_in_MEs_dt <- data.table(
chr = as.character(seqnames(cpg_in_MEs)),
start_pos = start(cpg_in_MEs),
end_pos = end(cpg_in_MEs),
alpha = mcols(cpg_in_MEs)$alpha,
ME = MEgroup
)
return(cpg_in_MEs)
}
getMEdt(gr_cpg, VanBaakESS_GRanges_hg38)
#######################################
## Harris2012_1776SIV_10children450k ##
HarrisSIV <- readxl::read_excel("dataPrev/Harris2012_1776SIV_10children450k.xls", sheet = 3)
HarrisSIV <- unique(HarrisSIV$Coordinate) ; length(HarrisSIV)
HarrisSIV_split <- tstrsplit(HarrisSIV, "[:-]", fixed = FALSE)
HarrisSIV_GRanges <- GRanges(
seqnames = HarrisSIV_split[[1]],
ranges = IRanges(start = as.integer(HarrisSIV_split[[2]]),
end = as.integer(HarrisSIV_split[[3]])) + 1,
strand = "*")
HarrisSIV_GRanges_hg38 <- liftOver(HarrisSIV_GRanges, chain)
HarrisSIV_GRanges_hg38 <- unlist(HarrisSIV_GRanges_hg38)
HarrisSIV_GRanges_hg38
#######################################
## VanBaak2018_ESS_HM450 ##
VanBaakESS <- readxl::read_excel("dataPrev/VanBaak2018_1580ESS_450k.xlsx", sheet = 2)
VanBaakESS <- unique(VanBaakESS$`UCSC browser coordinates`[VanBaakESS$`ESS hit`])
length(VanBaakESS)
VanBaakESS_split <- tstrsplit(VanBaakESS, "[:-]", fixed = FALSE)
VanBaakESS_GRanges <- GRanges(
seqnames = VanBaakESS_split[[1]],
ranges = IRanges(start = as.integer(VanBaakESS_split[[2]]), end = as.integer(VanBaakESS_split[[3]])),
strand = "*")
VanBaakESS_GRanges_hg38 <- liftOver(VanBaakESS_GRanges, chain)
VanBaakESS_GRanges_hg38 <- unlist(VanBaakESS_GRanges_hg38)
VanBaakESS_GRanges_hg38
#######################################
## Gunasekara2019_9926CoRSIVs_10WGBS ##
# Load corSIV intervals (already in hg38)
corSIV <- readxl::read_excel("dataPrev/Gunasekara2019_9926CoRSIVs_10WGBS.xls", sheet = 3)
corSIV <- unique(corSIV$USCS_Coordinates_CoRSIV)
corSIV_split <- tstrsplit(corSIV, "[:-]", fixed = FALSE)
corSIV_GRanges <- GRanges(
seqnames = corSIV_split[[1]],
ranges = IRanges(start = as.integer(corSIV_split[[2]]), end = as.integer(corSIV_split[[3]])),
strand = "*")
corSIV_GRanges
#######################################
## Kessler2018_687SIVregions_2WGBS hg19! ##
KesslerSIV <- readxl::read_excel("dataPrev/Kessler2018_supTables.xlsx", sheet = 1, skip = 1)
KesslerSIV
#######################################
## Kessler2018_687SIVregions_2WGBS hg19! ##
KesslerSIV <- readxl::read_excel("dataPrev/Kessler2018_supTables.xlsx", sheet = 2, skip = 1)
KesslerSIV
strand = "*")
KesslerSIV_GRanges <- GRanges(
seqnames = KesslerSIV$Chromosome,
ranges = IRanges(start = KesslerSIV$`ME start`,
end = KesslerSIV$`ME end`),
strand = "*")
VanBaakESS_GRanges_hg38 <- unlist(liftOver(VanBaakESS_GRanges, chain))
HarrisSIV_GRanges_hg38 <- unlist(liftOver(HarrisSIV_GRanges, chain))
KesslerSIV_GRanges_hg38 <- unlist(liftOver(KesslerSIV_GRanges, chain))
KesslerSIV_GRanges_hg38
KesslerSIV_GRanges
#######################################
## Kessler2018_687SIVregions_2WGBS hg19! ##
KesslerME <- readxl::read_excel("dataPrev/Kessler2018_supTables.xlsx", sheet = 2, skip = 1)
KesslerME_GRanges <- GRanges(
seqnames = KesslerME$Chromosome,
ranges = IRanges(start = KesslerME$`ME start`,
end = KesslerME$`ME end`),
strand = "*")
KesslerME_GRanges_hg38 <- unlist(liftOver(KesslerME_GRanges, chain))
#######################################
## Gunasekara2019_9926CoRSIVs_10WGBS ##
# Load corSIV intervals (already in hg38)
corSIV <- readxl::read_excel("dataPrev/Gunasekara2019_9926CoRSIVs_10WGBS.xls", sheet = 3)
corSIV <- unique(corSIV$USCS_Coordinates_CoRSIV)
corSIV_split <- tstrsplit(corSIV, "[:-]", fixed = FALSE)
corSIV_GRanges <- GRanges(
seqnames = corSIV_split[[1]],
ranges = IRanges(start = as.integer(corSIV_split[[2]]), end = as.integer(corSIV_split[[3]])),
strand = "*")
corSIV_GRanges_hg38 <- GRanges(
seqnames = corSIV_split[[1]],
ranges = IRanges(start = as.integer(corSIV_split[[2]]), end = as.integer(corSIV_split[[3]])),
strand = "*")
#######################################
## Silver2022_SoCCpGs_10WGBS ##
SoCCpGs <- readxl::read_excel("dataPrev/Silver2022_259SoC_hg19.xlsx", sheet = 6, skip = 2)
SoCCpGs$cpg
#######################################
## Silver2022_SoCCpGs_10WGBS ##
arrayRef <- readxl::read_excel("dataPrev/Silver2022_259SoC_hg19.xlsx", sheet = 3, skip = 2)
arrayRef
SoCCpGs <- readxl::read_excel("dataPrev/Silver2022_259SoC_hg19.xlsx", sheet = 6, skip = 2)
SoCCpGs$cpg %in% arrayRef$cpg
arrayRef$cpg %in% SoCCpGs$cpg
match(arrayRef$cpg, SoCCpGs$cpg)
match(SoCCpGs$cpg, arrayRef$cpg)
arrayRef$chr[match(SoCCpGs$cpg, arrayRef$cpg)]
arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)]
#######################################
## Silver2022_SoCCpGs_10WGBS ##
arrayRef <- readxl::read_excel("dataPrev/Silver2022_259SoC_hg19.xlsx", sheet = 3, skip = 2)
SoCCpGs <- readxl::read_excel("dataPrev/Silver2022_259SoC_hg19.xlsx", sheet = 6, skip = 2)
SoCCpGs_GRanges <- GRanges(
seqnames = arrayRef$chr[match(SoCCpGs$cpg, arrayRef$cpg)],
ranges = IRanges(start = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)],
end = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)] + 1)
strand = "*")
SoCCpGs_GRanges <- GRanges(
seqnames = arrayRef$chr[match(SoCCpGs$cpg, arrayRef$cpg)],
ranges = IRanges(start = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)],
end = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)] + 1)
strand = "*")
SoCCpGs_GRanges <- GRanges(
seqnames = arrayRef$chr[match(SoCCpGs$cpg, arrayRef$cpg)],
ranges = IRanges(start = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)],
end = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)] + 1),
strand = "*")
SoCCpGs_GRanges_hg38 <- unlist(liftOver(SoCCpGs_GRanges, chain))
SoCCpGs_GRanges
SoCCpGs_GRanges <- GRanges(
seqnames = paste0("chr", arrayRef$chr[match(SoCCpGs$cpg, arrayRef$cpg)]),
ranges = IRanges(start = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)],
end = arrayRef$loc[match(SoCCpGs$cpg, arrayRef$cpg)] + 1),
strand = "*")
SoCCpGs_GRanges_hg38 <- unlist(liftOver(SoCCpGs_GRanges, chain))
SoCCpGs_GRanges_hg38
SoCCpGs_GRanges
SoCCpGs_GRanges_hg38
# Convert regions to positions
gr_to_pos <- function(gr) {
reduce(gr) |>
as("GRanges") |>
unlist() |>
function(gr_flat) {
paste0(seqnames(gr_flat), ":", start(gr_flat):end(gr_flat))
} |>
unlist()
}
# Function to convert any GRanges to individual base positions as "chr:pos"
gr_to_pos <- function(gr) {
gr <- reduce(gr)  # Merge overlapping regions
unlist(lapply(seq_along(gr), function(i) {
chr <- as.character(seqnames(gr)[i])
start <- start(gr)[i]
end <- end(gr)[i]
paste0(chr, ":", start:end)
}))
}
sets <- list(
HarrisSIV = gr_to_pos(HarrisSIV_GRanges_hg38),
VanBaakESS = gr_to_pos(VanBaakESS_GRanges_hg38),
KesslerSIV = gr_to_pos(KesslerSIV_GRanges_hg38),
CoRSIV = gr_to_pos(corSIV_GRanges_hg38),
SoCCpGs = gr_to_pos(SoCCpGs_GRanges_hg38)
)
library(UpSetR)
upset(fromList(sets), nsets = 5, order.by = "freq")
pdf("figures/upsetPreviousME.pdf", width = 5, height = 5)
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
pdf("figures/upsetPreviousME.pdf", width = 6, height = 6)
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
pdf("figures/upsetPreviousME.pdf", width = 7, height = 6)
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
pdf("figures/upsetPreviousME.pdf", width = 8, height = 6)
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
pdf("figures/upsetPreviousME.pdf", width = 9, height = 6)
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
pdf("figures/upsetPreviousME.pdf", width = 10, height = 6)
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
library(VennDiagram)
install.packages("VennDiagram")
library(VennDiagram)
venn.plot <- venn.diagram(
x = sets,
category.names = names(sets),
filename = NULL
)
grid::grid.draw(venn.plot)
dev.off()
dev.off()
library(VennDiagram)
grid::grid.draw(venn.plot)
pdf("figures/upsetPreviousME.pdf", width = 10, height = 6)
grid.newpage()  # Start a fresh page explicitly
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
pdf("test.pdf")
upset(fromList(sets))
dev.off()
CairoPDF("figures/upsetPreviousME.pdf", width = 10, height = 6)
upset(fromList(sets), nsets = 5, order.by = "freq")
dev.off()
## To correct adding the CpGs sequenced in Atlas
library(UpSetR)
library(grid)
library(gridGraphics)
# Capture the grid output of the upset plot
plot_expr <- quote(upset(fromList(sets), nsets = 5, order.by = "freq"))
grob <- grid.grabExpr(eval(plot_expr))
# Save using grid graphics
pdf("figures/upsetPreviousME.pdf", width = 10, height = 6)
grid.draw(grob)
dev.off()
library(UpSetR)
library(gridGraphics)
library(grid)
# Create the plot in a base graphics device
pdf(NULL)  # draw to null device to avoid displaying
upset(fromList(sets), nsets = 5, order.by = "freq")
grid_plot <- grid.grab()  # Capture as a grid object
dev.off()
# Now save the captured grid object to a real PDF
pdf("figures/upsetPreviousME.pdf", width = 10, height = 6)
grid.draw(grid_plot)
dev.off()
# Now save the captured grid object to a real PDF
pdf("figures/upsetPreviousME.pdf", width = 8, height = 4)
grid.draw(grid_plot)
dev.off()
# Now save the captured grid object to a real PDF
pdf("figures/upsetPreviousME.pdf", width = 7, height = 4)
grid.draw(grid_plot)
dev.off()
# Now save the captured grid object to a real PDF
pdf("figures/upsetPreviousME.pdf", width = 8, height = 4)
grid.draw(grid_plot)
dev.off()
# Now save the captured grid object to a real PDF
pdf("figures/upsetPreviousME.pdf", width = 7, height = 5)
grid.draw(grid_plot)
dev.off()
