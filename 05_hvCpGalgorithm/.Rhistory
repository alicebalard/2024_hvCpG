cpg_names_all <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"cpg_names")
resDir = "/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/"
cpg_names_all[1]
system.time(runAndSave(
analysis = "test",
cpgPos_vec = 1:3,
resultDir = resDir,
NCORES = 1,
p0 = 0.80,
p1 = 0.65,
batch_size = 100,
dataDir = "/home/alice/Documents/Project_hvCpG/10X/")
)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_test_3CpGs_0_8p0_0_65p1.RData")
results_test_3CpGs_0_8p0_0_65p1
h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"scaled_matrix", index = 1:3)
h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = 1:3)
h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(1:3, NULL)))
h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(1:3, NULL))
sample_names_all <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"samples")
samples_group_all <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"samples_group")
samples <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"samples")
sample_groups <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"sample_groups")
samples
sample_groups
metadata <- data.frame(samples = samples, sample_groups = sample_groups)
View(metadata)
subRowData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(1:3, NULL))
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(1:3, NULL))
rm(subRowData)
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(NULL, 1:3))
subRawData
subRawData %>% head
indexVec = 1:3
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(NULL, indexVec))
names(subRawData) = cpg_names_all[indexVec]
subRawData
subRawData
indexVec = 1:3
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(NULL, indexVec))
subRawData
colnames(subRawData) = cpg_names_all[indexVec]
subRawData
subRawData$samples = samples
samples
subRawData$samples
subRawData
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(NULL, indexVec))
colnames(subRawData) = cpg_names_all[indexVec]
subRawData
subRawData <- as.data.frame(subRawData)
subRawData
subRawData$samples = samples
subRawData$samples = samples
subRawData$sample_groups = sample_groups
subRawData
# Exclude metadata columns
num_cols <- setdiff(names(subRawData), c("samples", "sample_groups"))
# Step 1: compute SD per group per CpG site
df_long <- subRawData %>%
select(all_of(num_cols), sample_groups) %>%
pivot_longer(cols = -sample_groups, names_to = "CpG", values_to = "value") %>%
group_by(sample_groups, CpG) %>%
summarise(sd = sd(value, na.rm = TRUE), .groups = "drop")
source("loadMyLibs.R")
# Step 1: compute SD per group per CpG site
df_long <- subRawData %>%
select(all_of(num_cols), sample_groups) %>%
pivot_longer(cols = -sample_groups, names_to = "CpG", values_to = "value") %>%
group_by(sample_groups, CpG) %>%
summarise(sd = sd(value, na.rm = TRUE), .groups = "drop")
df_long
subRawData %>%
select(all_of(num_cols), sample_groups)
subRawData %>%
select(all_of(num_cols), sample_groups) %>%
pivot_longer(cols = -sample_groups, names_to = "CpG", values_to = "value")
df_long
# Step 2: median of SDs per group
median_sd <- df_long %>%
group_by(sample_groups) %>%
summarise(median_sd = median(sd, na.rm = TRUE))
print(median_sd)
df_long
# Step 2: median of SDs per group
median_sd <- df_long %>%
group_by(CpG) %>%
summarise(median_sd = median(sd, na.rm = TRUE))
print(median_sd)
# Step 3: histogram of SD distributions per group
ggplot(df_long, aes(x = sd)) +
geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7) +
facet_wrap(~ sample_groups, scales = "free_y") +
theme_minimal() +
labs(title = "Distribution of SD per group",
x = "Standard deviation across samples",
y = "Count")
# Step 3: histogram of SD distributions per group
ggplot(df_long, aes(x = sd)) +
geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7) +
facet_wrap(~ CpG, scales = "free_y") +
theme_minimal() +
labs(title = "Distribution of SD per group",
x = "Standard deviation across samples",
y = "Count")
# Step 3: histogram of SD distributions per group
ggplot(df_long, aes(x = sd)) +
geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7) +
facet_wrap(~ CpG, scales = "free_y") +
theme_minimal() +
labs(title = "Distribution of SD per CpG",
x = "Standard deviation across samples",
y = "Count")
which(cpg_names_all %in% c("chr1_1944364-1944365"))
which(cpg_names_all %in% c("chr1_1944364-1944365", "chr1_778669-778670"))
indexVec = which(cpg_names_all %in% c("chr1_1944364-1944365", "chr1_778669-778670"))
system.time(runAndSave(
analysis = "test",
cpgPos_vec = indexVec,
resultDir = resDir,
NCORES = 1,
p0 = 0.80,
p1 = 0.65,
batch_size = 100,
dataDir = "/home/alice/Documents/Project_hvCpG/10X/")
)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_test_2CpGs_0_8p0_0_65p1.RData")
results_test_2CpGs_0_8p0_0_65p1
samples <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"samples")
sample_groups <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"sample_groups")
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(NULL, indexVec))
colnames(subRawData) = cpg_names_all[indexVec]
subRawData <- as.data.frame(subRawData)
subRawData$samples = samples
subRawData$sample_groups = sample_groups
# Exclude metadata columns
num_cols <- setdiff(names(subRawData), c("samples", "sample_groups"))
# Step 1: compute SD per group per CpG site
df_long <- subRawData %>%
select(all_of(num_cols), sample_groups) %>%
pivot_longer(cols = -sample_groups, names_to = "CpG", values_to = "value") %>%
group_by(sample_groups, CpG) %>%
summarise(sd = sd(value, na.rm = TRUE), .groups = "drop")
# Step 2: median of SDs per group
median_sd <- df_long %>%
group_by(CpG) %>%
summarise(median_sd = median(sd, na.rm = TRUE))
print(median_sd)
# Step 3: histogram of SD distributions per group
ggplot(df_long, aes(x = sd)) +
geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7) +
facet_wrap(~ CpG, scales = "free_y") +
theme_minimal() +
labs(title = "Distribution of SD per CpG",
x = "Standard deviation across samples",
y = "Count")
round(results_test_2CpGs_0_8p0_0_65p1,3)
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch001/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
results_Atlas10X_100000CpGs_0_8p0_0_65p1
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch001/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
results_Atlas_100000CpGs_0_8p0_0_65p1
tail(results_Atlas_100000CpGs_0_8p0_0_65p1)
colnames(results_Atlas_100000CpGs_0_8p0_0_65p1)
rownames(results_Atlas_100000CpGs_0_8p0_0_65p1)
rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec
table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec)
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch002/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
tail(results_Atlas_100000CpGs_0_8p0_0_65p1)
table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec)
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch003/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
tail(results_Atlas_100000CpGs_0_8p0_0_65p1)
table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec)
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch004/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
tail(results_Atlas_100000CpGs_0_8p0_0_65p1)
table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec)
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch005/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
tail(results_Atlas_100000CpGs_0_8p0_0_65p1)
table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec)
## Check if my full run is correct
for (x in 1:20){
load(paste0("resultsDir/Atlas10X/Atlas_batch00", x, "/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData"))
table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec)
}
x=1
load(paste0("resultsDir/Atlas10X/Atlas_batch00", x, "/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData"))
## Check if my full run is correct
for (x in 1:9){
load(paste0("resultsDir/Atlas10X/Atlas_batch00", x, "/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData"))
table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec)
}
## Check if my full run is correct
for (x in 1:9){
load(paste0("resultsDir/Atlas10X/Atlas_batch00", x, "/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData"))
print(table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec))
}
## Check if my full run is correct
for (x in 10:20){
load(paste0("resultsDir/Atlas10X/Atlas_batch0", x, "/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData"))
print(table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec))
}
## Check if my full run is correct
for (x in 10:100){
load(paste0("resultsDir/Atlas10X/Atlas_batch0", x, "/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData"))
print(table(rownames(results_Atlas_100000CpGs_0_8p0_0_65p1) %in% indexVec))
}
indexVec
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch001/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
results_Atlas_100000CpGs_0_8p0_0_65p1[indexVec]
results_test_2CpGs_0_8p0_0_65p1
round(results_test_2CpGs_0_8p0_0_65p1,3)
rownames(results_Atlas_100000CpGs_0_8p0_0_65p1[indexVec]
)
rownames(results_Atlas_100000CpGs_0_8p0_0_65p1[indexVec])
results_Atlas_100000CpGs_0_8p0_0_65p1
rownames(results_Atlas_100000CpGs_0_8p0_0_65p1[indexVec,])
head(results_Atlas_100000CpGs_0_8p0_0_65p1)
rownames(head(results_Atlas_100000CpGs_0_8p0_0_65p1))
rownames(results_Atlas_100000CpGs_0_8p0_0_65p1)[indexVec]
results_Atlas_100000CpGs_0_8p0_0_65p1[indexVec]
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1.RData")
reshvCpG = results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1; rm(results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1.RData")
resControls = results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1; rm(results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1)
reshvCpG
round(results_test_2CpGs_0_8p0_0_65p1,3)
rownames(reshvCpG)
rownames(reshvCpG) %in% indexVec
reshvCpG[rownames(reshvCpG) %in% indexVec,]
reshvCpG[rownames(reshvCpG) %in% cpg_names_all[indexVec],]
resControls[rownames(resControls) %in% cpg_names_all[indexVec],]
round(results_test_2CpGs_0_8p0_0_65p1,3)
source("loadMyLibs.R")
dataDir = "/home/alice/Documents/Project_hvCpG/10X/"
codeDir = "/home/alice/Documents/GIT/2024_hvCpG/"
resDir = file.path(codeDir, "05_hvCpGalgorithm/resultsDir/Atlas10X/")
###########################
message("Load the cpgs...")
cpg_names_all <- h5read(file.path(dataDir, "all_matrix_noscale.h5"), "cpg_names")
###################################
## Which are covered in 26 cells ##
cpg_46 <- read.table(file.path(dataDir, "selected_cpgs_min3_in46_datasets.txt"))$V1
#############################################
message("Download the chain file for liftover...")
dir.create(file.path(codeDir, "05_hvCpGalgorithm/dataPrev"), recursive = TRUE, showWarnings = FALSE)
chain_url <- "http://hgdownload.cse.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz"
chain_gz <- file.path(codeDir, "05_hvCpGalgorithm/dataPrev/hg19ToHg38.over.chain.gz")
chain_file <- file.path(codeDir, "05_hvCpGalgorithm/dataPrev/hg19ToHg38.over.chain")
if (!file.exists(chain_file)) {
download.file(chain_url, chain_gz)
R.utils::gunzip(chain_gz, destname = chain_file, remove = FALSE)
}
chain <- import.chain(chain_file)
## Manifest illumina450k to check arrays
data(IlluminaHumanMethylation450kanno.ilmn12.hg19)
anno450k <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
###########################################
message("Prepare Derakhshan2022_hvCpGs...")
DerakhshanhvCpGs <- readxl::read_excel(file.path(codeDir, "05_hvCpGalgorithm/dataPrev/Derakhshan2022_4143hvCpGs_450k.xlsx"), sheet = 6, skip = 3)
DerakhshanhvCpGs_GRanges <- GRanges(
seqnames = anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"chr"],
ranges = IRanges(start = ifelse(anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"strand"] %in% "+",
anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"pos"],
anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"pos"] - 1),
end = ifelse(anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"strand"] %in% "+",
anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"pos"] + 1,
anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"pos"])),
strand = anno450k[match(DerakhshanhvCpGs$CpG, anno450k$Name),"strand"])
DerakhshanhvCpGs_GRanges_hg38 <- unlist(liftOver(DerakhshanhvCpGs_GRanges, chain))
length(DerakhshanhvCpGs_GRanges_hg38) == 4143
DerakhshanhvCpGs_names <- paste0(DerakhshanhvCpGs_GRanges_hg38@seqnames, "_", DerakhshanhvCpGs_GRanges_hg38@ranges)
# Restrict to CpGs in cpg_46
DerakhshanhvCpGs_names_filtered <- DerakhshanhvCpGs_names[DerakhshanhvCpGs_names %in% cpg_46]
# Find positions in cpg_names_all
DerakhshanhvCpGs_positions <- match(DerakhshanhvCpGs_names_filtered, cpg_names_all)
###############################################
message("Matching genetic controls to hvCpGs..")
mQTLcontrols <- read.table(file.path(codeDir, "03_prepDatasetsMaria/cistrans_GoDMC_hvCpG_matched_control.txt"), header = T)
mQTLcontrols_GRanges <- GRanges(
seqnames = anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"chr"],
ranges = IRanges(start = ifelse(anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"strand"] %in% "+",
anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"pos"],
anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"pos"] - 1),
end = ifelse(anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"strand"] %in% "+",
anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"pos"] + 1,
anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"pos"])),
strand = anno450k[match(mQTLcontrols$controlCpG_name, anno450k$Name),"strand"])
mQTLcontrols_GRanges_hg38 <- unlist(liftOver(mQTLcontrols_GRanges, chain))
length(mQTLcontrols_GRanges_hg38) == 3644
mQTLcontrols_names <- paste0(mQTLcontrols_GRanges_hg38@seqnames, "_", mQTLcontrols_GRanges_hg38@ranges)
# Restrict to CpGs in cpg_46
mQTLcontrols_names_filtered <- mQTLcontrols_names[mQTLcontrols_names %in% cpg_46]
# Find positions in cpg_names_all
mQTLcontrols_positions <- match(mQTLcontrols_names_filtered, cpg_names_all)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1.RData")
reshvCpG = results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1; rm(results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1.RData")
resControls = results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1; rm(results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1)
df = rbind(data.frame(alpha = reshvCpG, type = "hvCpG Derakhshan"),
data.frame(alpha = resControls, type = "mQTL controls"))
ggplot(df, aes(x = type, y = alpha)) +
geom_jitter(aes(fill=type), pch=21, size = 3, alpha = .1)+
geom_violin(aes(col=type))+
geom_boxplot(aes(col=type), width = .1) +
theme_minimal(base_size = 14) +
theme(legend.position = "none", axis.title.x = element_blank()) +
ylab("Probability of being a hvCpG")
summary(lm(alpha~type, df))
head(df)
resControls[rownames(resControls) %in% cpg_names_all[indexVec],]
cpg_names_all[indexVec]
rownames(df)
rownames(df) %in% c("chr1_778669-778670", "chr1_1944364-1944365")
df[rownames(df) %in% c("chr1_778669-778670", "chr1_1944364-1944365"),]
df
df$alpha
hist(df$alpha)
hist(df$alpha, breaks = 100)
hist(df$alpha[df$type %in% "hvCpG Derakhshan"], breaks = 100)
hist(df$alpha[df$type %in% "mQTL controls"], breaks = 100)
hist(df$alpha[df$type %in% "hvCpG Derakhshan"], breaks = 100)
hist(df$alpha[df$type %in% "mQTL controls"], breaks = 100)
# Create matching names for GRanges
gr_names <- paste0(
as.character(seqnames(DerakhshanhvCpGs_GRanges_hg38)), "_",
start(DerakhshanhvCpGs_GRanges_hg38), "-", end(DerakhshanhvCpGs_GRanges_hg38)
)
# Match alpha values to GRanges
DerakhshanhvCpGs_GRanges_hg38$alpha <- reshvCpG[rownames(reshvCpG) %in% gr_names]
df$alpha[df$type %in% "hvCpG Derakhshan"]
df$alpha[df$type %in% "hvCpG Derakhshan"] < 0.1
df[df$alpha[df$type %in% "hvCpG Derakhshan"] < 0.1,]
indexVec = which(cpg_names_all %in% c("chr1_1944364-1944365", "chr1_778669-778670", "chr11_86301834-86301835"))
system.time(runAndSave(
analysis = "test",
cpgPos_vec = indexVec,
resultDir = resDir,
NCORES = 1,
p0 = 0.80,
p1 = 0.65,
batch_size = 100,
dataDir = "/home/alice/Documents/Project_hvCpG/10X/")
)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_test_2CpGs_0_8p0_0_65p1.RData")
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_test_3CpGs_0_8p0_0_65p1.RData")
round(results_test_3CpGs_0_8p0_0_65p1,3)
indexVec
indexVec = which(cpg_names_all %in% c("chr1_1944364-1944365", "chr1_778669-778670", "chr11_86301834-86301835"))
indexVec
system.time(runAndSave(
analysis = "test",
cpgPos_vec = indexVec,
resultDir = resDir,
NCORES = 1,
p0 = 0.80,
p1 = 0.65,
batch_size = 100,
dataDir = "/home/alice/Documents/Project_hvCpG/10X/")
)
system.time(runAndSave(
analysis = "test",
cpgPos_vec = indexVec,
resultDir = resDir,
NCORES = 1,
p0 = 0.80,
p1 = 0.65,
batch_size = 100,
dataDir = "/home/alice/Documents/Project_hvCpG/10X/", overwrite = T)
)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_test_3CpGs_0_8p0_0_65p1.RData")
round(results_test_3CpGs_0_8p0_0_65p1,3)
samples <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"samples")
sample_groups <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"sample_groups")
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(NULL, indexVec))
colnames(subRawData) = cpg_names_all[indexVec]
subRawData <- as.data.frame(subRawData)
subRawData$samples = samples
subRawData$sample_groups = sample_groups
# Exclude metadata columns
num_cols <- setdiff(names(subRawData), c("samples", "sample_groups"))
# Step 1: compute SD per group per CpG site
df_long <- subRawData %>%
select(all_of(num_cols), sample_groups) %>%
pivot_longer(cols = -sample_groups, names_to = "CpG", values_to = "value") %>%
group_by(sample_groups, CpG) %>%
summarise(sd = sd(value, na.rm = TRUE), .groups = "drop")
# Step 2: median of SDs per group
median_sd <- df_long %>%
group_by(CpG) %>%
summarise(median_sd = median(sd, na.rm = TRUE))
print(median_sd)
# Step 3: histogram of SD distributions per group
ggplot(df_long, aes(x = sd)) +
geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7) +
facet_wrap(~ CpG, scales = "free_y") +
theme_minimal() +
labs(title = "Distribution of SD per CpG",
x = "Standard deviation across samples",
y = "Count")
# Step 2: median of SDs per group
df_long %>%
group_by(CpG) %>%
summarise(median_sd = median(sd, na.rm = TRUE),
mean_sd = mean(sd, na.rm = TRUE))
df_long
# Step 2: median of SDs per group
med <- df_long %>%
group_by(CpG) %>%
summarise(median_sd = median(sd, na.rm = TRUE))
med
# Step 3: histogram of SD distributions per group
ggplot(df_long, aes(x = sd)) +
geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7) +
facet_wrap(~ CpG, scales = "free_y") +
theme_minimal() +
labs(title = "Distribution of SD per CpG",
x = "Standard deviation across samples",
y = "Count")+
geom_vline(data = med, aes(xintercept = median_sd))
round(results_test_2CpGs_0_8p0_0_65p1,3)
round(results_test_3CpGs_0_8p0_0_65p1,3)
df[df$alpha[df$type %in% "hvCpG Derakhshan"] < 0.01,]
df[df$alpha[df$type %in% "hvCpG Derakhshan"] < 0.01,]
df$alpha[df$type %in% "hvCpG Derakhshan"]
df[df$alpha < 0.01,]
df[df$alpha < 0.01 & df$type %in% "hvCpG Derakhshan",]
indexVec = which(cpg_names_all %in% c("chr1_1944364-1944365", "chr1_778669-778670",
"chr11_86301834-86301835", "chr22_27438478-27438479"))
system.time(runAndSave(
analysis = "test",
cpgPos_vec = indexVec,
resultDir = resDir,
NCORES = 1,
p0 = 0.80,
p1 = 0.65,
batch_size = 100,
dataDir = "/home/alice/Documents/Project_hvCpG/10X/", overwrite = T)
)
res = results_test_4CpGs_0_8p0_0_65p1
round(res,3)
df[df$alpha < 0.01 & df$type %in% "hvCpG Derakhshan",]
round(res,3)
samples <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"samples")
sample_groups <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"sample_groups")
subRawData <- h5read("/home/alice/Documents/Project_hvCpG/10X/all_matrix_noscale.h5",
"matrix", index = list(NULL, indexVec))
colnames(subRawData) = cpg_names_all[indexVec]
subRawData <- as.data.frame(subRawData)
subRawData$samples = samples
subRawData$sample_groups = sample_groups
# Exclude metadata columns
num_cols <- setdiff(names(subRawData), c("samples", "sample_groups"))
# Step 1: compute SD per group per CpG site
df_long <- subRawData %>%
select(all_of(num_cols), sample_groups) %>%
pivot_longer(cols = -sample_groups, names_to = "CpG", values_to = "value") %>%
group_by(sample_groups, CpG) %>%
summarise(sd = sd(value, na.rm = TRUE), .groups = "drop")
# Step 2: median of SDs per group
med <- df_long %>%
group_by(CpG) %>%
summarise(median_sd = median(sd, na.rm = TRUE))
# Step 3: histogram of SD distributions per group
ggplot(df_long, aes(x = sd)) +
geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7) +
facet_wrap(~ CpG, scales = "free_y") +
theme_minimal() +
labs(title = "Distribution of SD per CpG",
x = "Standard deviation across samples",
y = "Count")+
geom_vline(data = med, aes(xintercept = median_sd))
round(results_test_3CpGs_0_8p0_0_65p1,3)
round(res,3)
## Check if my full run is correct
load("resultsDir/Atlas10X/Atlas_batch001/results_Atlas10X_100000CpGs_0_8p0_0_65p1.RData")
rownames(results_Atlas_100000CpGs_0_8p0_0_65p1)[indexVec]
results_Atlas_100000CpGs_0_8p0_0_65p1[indexVec]
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1.RData")
reshvCpG = results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1; rm(results_hvCpGsMariav5_1663CpGs_0_8p0_0_65p1)
load("/home/alice/Documents/GIT/2024_hvCpG/05_hvCpGalgorithm/resultsDir/Atlas10X/results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1.RData")
resControls = results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1; rm(results_mQTLcontrolsv5_1474CpGs_0_8p0_0_65p1)
reshvCpG[rownames(reshvCpG) %in% cpg_names_all[indexVec],]
resControls[rownames(resControls) %in% cpg_names_all[indexVec],]
