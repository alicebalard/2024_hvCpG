head(dt)
res_Alpha_Atlas <- dplyr::left_join(resCompArray, dt, by = "name")
head(dt)
head(resCompArray)
head(res_Alpha_Atlas)
names(res_Alpha_Atlas)
head(res_Alpha_Atlas)
res_Alpha_Atlas <- dplyr::left_join(resCompArray, dt, by = "name") %>%
dplyr::select("alpha_array_all", "alpha_array_3ind", "alpha", "chrpos" )
res_Alpha_Atlas %>% dplyr::rename(alpha_atlas=alpha)
head(res_Alpha_Atlas)
res_Alpha_Atlas <- res_Alpha_Atlas %>% dplyr::rename(alpha_atlas=alpha)
head(res_Alpha_Atlas)
head(res_Alpha_Atlas)
p1 <- ggplot(res_Alpha_Atlas, aes(x=alpha_array_all, y=alpha_array_3ind, fill = group, col = group)) +
geom_point(data = res_Alpha_Atlas[is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.05) +
geom_point(data = res_Alpha_Atlas[!is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.4) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
theme(legend.position.inside = c(0.18,0.85),
legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.4),
legend.key = element_rect(fill = "white", color = NA)) +
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all array data",
y = "P(hv) considering 3 individuals per dataset")
p2 <- ggplot(res_Alpha_Atlas, aes(x=alpha_atlas, y=alpha_array_all, fill = group, col = group)) +
geom_point(data = res_Alpha_Atlas[is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.05) +
geom_point(data = res_Alpha_Atlas[!is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.4) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all atlas data",
y = "P(hv) considering all array data")
p3 <- ggplot(res_Alpha_Atlas, aes(x=alpha_atlas, y=alpha_array_3ind, fill = group, col = group)) +
geom_point(data = res_Alpha_Atlas[is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.05) +
geom_point(data = res_Alpha_Atlas[!is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.4) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all atlas data",
y = "P(hv) considering array with 3 individuals per dataset only")
# --- Turn off legends inside plots ---
p1_clean <- p1 + theme(legend.position = "none")
p2_clean <- p2 + theme(legend.position = "none")
p3_clean <- p3 + theme(legend.position = "none")
# --- Extract one legend (e.g. from p1) ---
legend <- cowplot::get_legend(
p1 + theme(legend.position = "bottom",
legend.box = "horizontal",
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.4),
legend.key = element_rect(fill = "white", color = NA))
)
head(resCompArray)
res_Alpha_Atlas <- dplyr::left_join(resCompArray, dt, by = "name") %>%
dplyr::select("alpha_array_all", "alpha_array_3ind", "alpha", "chrpos", "group") %>%
dplyr::rename(alpha_atlas=alpha)
head(res_Alpha_Atlas)
head(res_Alpha_Atlas)
res_Alpha_Atlas <- dplyr::left_join(resCompArray, dt, by = "name")
res_Alpha_Atlas %>%
dplyr::select("alpha_array_all", "alpha_array_3ind", "alpha", "chrpos", "group") %>%
dplyr::rename(alpha_atlas=alpha) %>% head
head(res_Alpha_Atlas)
res_Alpha_Atlas$group.x
res_Alpha_Atlas %>%
dplyr::select("alpha_array_all", "alpha_array_3ind", "alpha", "chrpos", "group.x") %>%
dplyr::rename(alpha_atlas=alpha) %>% head
res_Alpha_Atlas %>%
dplyr::select("alpha_array_all", "alpha_array_3ind", "alpha", "chrpos", "group.x") %>%
dplyr::rename(alpha_atlas=alpha) %>% table(group.x)
res_Alpha_Atlas <- dplyr::left_join(resCompArray, dt, by = "name") %>%
dplyr::select("alpha_array_all", "alpha_array_3ind", "alpha", "chrpos", "group.x") %>%
dplyr::rename(alpha_atlas=alpha, group=group.x)
head(res_Alpha_Atlas)
p1 <- ggplot(res_Alpha_Atlas, aes(x=alpha_array_all, y=alpha_array_3ind, fill = group, col = group)) +
geom_point(data = res_Alpha_Atlas[is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.05) +
geom_point(data = res_Alpha_Atlas[!is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.4) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
theme(legend.position.inside = c(0.18,0.85),
legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.4),
legend.key = element_rect(fill = "white", color = NA)) +
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all array data",
y = "P(hv) considering 3 individuals per dataset")
p2 <- ggplot(res_Alpha_Atlas, aes(x=alpha_atlas, y=alpha_array_all, fill = group, col = group)) +
geom_point(data = res_Alpha_Atlas[is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.05) +
geom_point(data = res_Alpha_Atlas[!is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.4) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all atlas data",
y = "P(hv) considering all array data")
p3 <- ggplot(res_Alpha_Atlas, aes(x=alpha_atlas, y=alpha_array_3ind, fill = group, col = group)) +
geom_point(data = res_Alpha_Atlas[is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.05) +
geom_point(data = res_Alpha_Atlas[!is.na(res_Alpha_Atlas$group),], pch = 21, alpha = 0.4) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all atlas data",
y = "P(hv) considering array with 3 individuals per dataset only")
# --- Turn off legends inside plots ---
p1_clean <- p1 + theme(legend.position = "none")
p2_clean <- p2 + theme(legend.position = "none")
p3_clean <- p3 + theme(legend.position = "none")
# --- Extract one legend (e.g. from p1) ---
legend <- cowplot::get_legend(
p1 + theme(legend.position = "bottom",
legend.box = "horizontal",
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.4),
legend.key = element_rect(fill = "white", color = NA))
)
# --- Arrange plots with legend as 4th panel ---
pdf(here("05_hvCpGalgorithm/figures/TEST_compAtlasvsArrayalland3ind.pdf"), width = 10, height = 10)
cowplot::plot_grid(p1_clean, p2_clean, p3_clean, legend,
ncol = 2)  # grid layout: 2 cols Ã— 2 rows
dev.off()
atlas_dt <- dt %>%
mutate(
chr   = str_extract(chrpos, "chr[0-9XY]+"),
start = as.numeric(str_extract(chrpos, "(?<=_)[0-9]+")),
end   = as.numeric(str_extract(chrpos, "(?<=-)[0-9]+"))
)
# 1. Convert to GRanges object
gr_atlas <- GRanges(
seqnames = dt$chr,
ranges = IRanges(start = dt$pos, end = dt$pos),
mcols = dt
)
dt$chr
dt$pos
# 1. Convert to GRanges object
gr_atlas <- GRanges(
seqnames = paste0("chr", dt$chr),
ranges = IRanges(start = dt$pos, end = dt$pos),
mcols = dt
)
dt$pos
range(dt$pos)
# 1. Convert to GRanges object
gr_atlas <- GRanges(
seqnames = paste0("chr", dt$chr),
ranges = IRanges(start = dt$pos, end = dt$pos),
mcols = dt
)
Atlas_dt <- dt
rm(dt)
stop("stop here to only prepare atlas_dt")
# 1. Convert to GRanges object
gr_atlas <- GRanges(
seqnames = paste0("chr", Atlas_dt$chr),
ranges = IRanges(start = Atlas_dt$start_pos, end = Atlas_dt$end_pos),
mcols = dt
)
# 1. Convert to GRanges object
gr_atlas <- GRanges(
seqnames = paste0("chr", Atlas_dt$chr),
ranges = IRanges(start = Atlas_dt$start_pos, end = Atlas_dt$end_pos),
mcols = Atlas_dt
)
# 2. PAX8 as a GRanges
gr_PAX8 <- GRanges(
seqnames = "chr2",
ranges = IRanges(start = 113215997, end = 113278921)
)
# 3. Find overlaps between CpGs and the gene region
hits <- findOverlaps(gr_resCommonAlphaAtlas, gr_PAX8)
gr_atlas
# 3. Find overlaps between CpGs and the gene region
hits <- findOverlaps(gr_atlas, gr_PAX8)
hits
# 4. Extract matching rows from original df
df_hits <- gr_atlas[queryHits(hits), ]
as.data.frame(df_hits)
hist(df_hits$mcols.alpha)
hist(df_hits$mcols.alpha, breaks = 100)
ggplot(df_hits, aes(x=start, y=mcols.alpha)) +
geom_point() +
theme_minimal(base_size = 14)
ggplot(df_hits, aes(x=start, y=mcols.alpha)) +
geom_point() +
theme_minimal(base_size = 14)
df_hits
ggplot(data.frame(df_hits), aes(x=start, y=mcols.alpha)) +
geom_point() +
theme_minimal(base_size = 14)
ggplot(data.frame(df_hits), aes(x=start, y=mcols.alpha)) +
geom_point() +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE),
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
ggplot(data.frame(df_hits), aes(x=start, y=mcols.alpha)) +
geom_point() +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE)-.2,
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
resArray
## Load array results
resArray <- readRDS(here("05_hvCpGalgorithm/dataOut/resArray.RDS"))
resArray$chrpos
resArray$chr
resArray$pos
head(resArray)
gr_array <- GRanges(
seqnames = resArray$chr,
ranges = IRanges(start = resArray$pos, end = resArray$pos +1),
mcols = resArray
)
hits2 <- findOverlaps(gr_array, gr_PAX8)
hits2
df_hits2 <- gr_array[queryHits(hits2), ]
df_hits2
ggplot() +
geom_point(data.frame(df_hits), aes(x=start, y=mcols.alpha)) +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE)-.2,
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
ggplot(aes(x=start)) +
geom_point(data.frame(df_hits), aes(y=mcols.alpha)) +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE)-.2,
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
ggplot(aes(x=start)) +
geom_point(data.frame(df_hits), aes(y=mcols.alpha)) +
theme_minimal(base_size = 14)
ggplot(data.frame(df_hits), aes(x=start)) +
geom_point(aes(y=mcols.alpha))
ggplot(data.frame(df_hits), aes(x=start)) +
geom_point(aes(y=mcols.alpha)) +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE)-.2,
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
df_hits2
ggplot(data.frame(df_hits), aes(x=start)) +
geom_point(aes(y=mcols.alpha)) +
geom_point(data.frame(df_hits2), aes(y=alpha_array_all,  fill=mcols.group), size = 3, pch =21) +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE)-.2,
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
ggplot(data.frame(df_hits), aes(x=start)) +
geom_point(aes(y=mcols.alpha)) +
geom_point(data.frame(df_hits2), aes(y=alpha_array_all, fill=mcols.group), size = 3, pch =21) +
theme_minimal(base_size = 14)
ggplot(data.frame(df_hits), aes(x=start)) +
geom_point(aes(y=mcols.alpha))
ggplot(data.frame(df_hits), aes(x=start)) +
geom_point(aes(y=mcols.alpha)) +
geom_point(data.frame(df_hits2), aes(y=mcols.alpha_array_all, fill=mcols.group), size = 3, pch =21) +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE)-.2,
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
df_hits2
ggplot(data.frame(df_hits), aes(x=start)) +
geom_point(aes(y=mcols.alpha)) +
# geom_point(data.frame(df_hits2), aes(y=mcols.alpha_array_all, fill=mcols.group), size = 3, pch =21) +
theme_minimal(base_size = 14) +
# Add the rectangle
annotate(
"rect",
xmin = 113278394,
xmax = 113279523,
ymin = -Inf,      # spans entire y-range
ymax = Inf,
alpha = 0.2,
fill = "blue"
) +
# Add a label for the promoter
annotate(
"text",
x = (113278394 + 113279523) / 2,
y = max(df_hits$mcols.alpha, na.rm = TRUE)-.2,
label = "promoter",
vjust = -1,
size = 5,
fontface = "bold",
color = "blue"
)
head(res_Alpha_Atlas)
p1
p1 <- ggplot(res_Alpha_Atlas, aes(x=alpha_array_all, y=alpha_array_3ind, fill = group, col = group)) +
geom_point(pch = 21, alpha = 0.05) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
theme(legend.position.inside = c(0.18,0.85),
legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.4),
legend.key = element_rect(fill = "white", color = NA)) +
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all array data",
y = "P(hv) considering 3 individuals per dataset")
p1
####################################
p1 <- ggplot(res_Alpha_Atlas, aes(x=alpha_array_all, y=alpha_array_3ind, fill = group, col = group)) +
geom_point(pch = 21, alpha = 0.05) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
theme(legend.position.inside = c(0.18,0.85),
legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.4),
legend.key = element_rect(fill = "white", color = NA)) +
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all array data",
y = "P(hv) considering 3 individuals per dataset")
p1
p2 <- ggplot(res_Alpha_Atlas, aes(x=alpha_atlas, y=alpha_array_all, fill = group, col = group)) +
geom_point(pch = 21, alpha = 0.05) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all atlas data",
y = "P(hv) considering all array data")
p3 <- ggplot(res_Alpha_Atlas, aes(x=alpha_atlas, y=alpha_array_3ind, fill = group, col = group)) +
geom_point(pch = 21, alpha = 0.05) +
geom_smooth(method = "lm", fill = "black") +
scale_fill_manual(values = c("#DC3220", "#005AB5", "grey"),
labels = c("hvCpG (Derakhshan)", "mQTL controls", "background")) +
scale_colour_manual(values = c("#DC3220", "#005AB5", "grey"),guide = "none") +
theme_minimal(base_size = 14) +
guides(fill = guide_legend(position = "inside"))+
labs(title = "Probability of being hypervariable",
x = "P(hv) considering all atlas data",
y = "P(hv) considering array with 3 individuals per dataset only")
# --- Turn off legends inside plots ---
p1_clean <- p1 + theme(legend.position = "none")
p2_clean <- p2 + theme(legend.position = "none")
p3_clean <- p3 + theme(legend.position = "none")
# --- Extract one legend (e.g. from p1) ---
legend <- cowplot::get_legend(
p1 + theme(legend.position = "bottom",
legend.box = "horizontal",
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.4),
legend.key = element_rect(fill = "white", color = NA))
)
# --- Arrange plots with legend as 4th panel ---
pdf(here("05_hvCpGalgorithm/figures/TEST_compAtlasvsArrayalland3ind.pdf"), width = 10, height = 10)
cowplot::plot_grid(p1_clean, p2_clean, p3_clean, legend,
ncol = 2)  # grid layout: 2 cols Ã— 2 rows
dev.off()
